// Online C++ compiler to run C++ program online
#include <iostream>
#include <vector>
using namespace std;

int result;

//Method declaration practice

class Student {                         //This will be used in further examples
    
    public:
        Student();
        Student(string name);
        Student(string name, int age);
        Student(string const &p, string const &f, string const &l);
        Student(string const &p, string const &f);
        void setName(string name);      //FUNCTION CONST
        void setAge(int age);
        string getName() const;
        int getAge();
        //Problem solving
        string PID;
        string first_name;
        string last_name;
        
        string toString();
        void swap(int &a, int &b);
    private:
        static string actualName;
        static int actualAge;
};

//Template practice

template <typename Data>
class Node{
    public:
        Data const data;
        Node(const Data & d): data(d) {}
};

//Method definition practice for Student

//Variable declarations default
string Student::actualName = "";
int Student::actualAge = 0;

//constructors
Student::Student(){
    cout << "within the empty parameter student constructor" << endl;
}

Student::Student(string name){
    actualName = name;
}

Student::Student(string name, int age){
    actualName = name;
    actualAge = age;
}


//Constructor from problem solving 10/6/23

//recall that int & x = y; this is a referene to variable y, or the same address at variable your your your

//if it is &p, or the ampersand is before the variable, it is a memory address of that variable
//when used in defining a constructor, it is a reference to that variable . Two different ampersand meanings

Student::Student(const string &p, const string &f, const string &l ){
    
    //remember to use "this->" isntead of "this." because this is a pointer to type student"
    this->PID = p;
    this->first_name = f;
    this->last_name = l;
}

//lets practice initializing with a member initialization list
//Semicolons are not needed!

Student::Student(const string &p, const string &f): PID(p), first_name(f){}

//methods for getting private variables

string Student::getName() const{        //FUNCTION CONST
    return actualName;
}

int Student::getAge(){
    return actualAge;
}

//Method for swapping 2 integer values using pass by reference

void Student::swap(int &a, int &b){
    
    cout << "The value of a is:" << a << endl;
    cout << "The value of b is:" << b << endl;
    cout << "Performing swap" << endl;
    
    int temp = a;
    a = b;
    b = temp;
    cout << "The value of a is:" << a << endl;
    cout << "The value of b is:" << b << endl;
    
    
}

void print_inorder(int* p, int size){
    for(int i = 0; i < size; ++i){
        cout << "Element at " << i << " is:" << *p << endl;
        p++;
    }
}

//no copy, directly using vector address

void print_inorder_while(vector<int>* a){
    vector<int>:: iterator index = a->begin();
    vector<int>:: iterator end = a->end();
    
    while(index != end){
        cout<< *index << endl;
        ++index;
    }
}

//copy made on runtime environment, then destroyed at method completion
void print_inorder_while_copy(vector<int> a){
    vector<int>:: iterator index = a.begin();
    vector<int>:: iterator end = a.end();
    
    while(index != end){
        cout<< *index << endl;
        ++index;
    }
}



int main() {
    // Humble beginnings
    cout << "Hello world!" << endl << endl;
    
    //Let's make some student objects to learn pointers and references
    
    //s1 is a reference to an object student. It is carrying a student value .
    Student s1 = Student("Victor");
    cout << "This is testing Student class constructor2:" << s1.getName() << endl;
    
    
    
    //Great note from instructor
    
    cout << "In pass by value, we create copies of the value, while pass by reference, we create references to the actual variables" << endl << endl;
    
    //This is going to be an experience with vectors and iterators
    
    cout << "We are gonna be dabbling in vectors today!" << endl;
    
    //vector initialization and appending elements
    vector<int> a;
    
    a.push_back(1);
    a.push_back(2);
    a.push_back(3);
    a.push_back(4);
    
    cout << "Let us iterate over the elements and print them!" << endl;
    
    for(int i = 0; i < a.size(); i++){
        cout << "The element at " << i << " is:" << a[i] << endl;
    }
    
    cout << "Note that using pop_back deletes the last variable and does not return anything!" << endl;
    
    a.pop_back();
    
    for(int i = 0; i < a.size(); i++){
        cout << "The element at " << i << " is:" << a[i] << endl;
    }
    
    
    cout << "Now let's practice referencing a method outside the main method." << endl;
    
    int* pointer = &a[0];
    
    print_inorder(pointer, a.size());
    
    cout << "The method is using a preincrement, and the difference will be fleshed out later!"<< endl;
    
    cout << "Now we are going to practice using the overloaded != inequality and vector begin() and end() properties." << endl;
    
    cout << "Using the actual vector for iterator begin and end. " << endl;
    
    print_inorder_while(&a);
    
    
    cout << "Using copy vector for iterator begin and end." << endl;
    
    print_inorder_while_copy(a);
    
    cout << "When implementing an iterator class, need to overload several operators." << endl;
    cout << "==, !=, *, ++" << endl;
    cout << "Then the functions begin(), and end() need to be implemented." << endl;
    cout << "begin() returns iterator to the beginning of list. end() returns iterator to just after the end of the last element." << endl << endl;
    
    

    
    cout << "Important note! End() iterator points to last array slot + 1. For example, if size is 3-> last data point is a[2], points to a[3]" << endl;
    cout << "Also, the term overloaded means the object class has redefined a new meaning for the expression." << endl;
    cout << "Particularly, the expressions: '!=' , '*iterator', and 'iterator++'" << endl;
    cout << "Lastly, the big picture is, the iterator class overloads a lot of expressions for us, so we can standardize iteration across data types."<< endl;
    cout << "Whether its a node pointer in a LL, or a int pointer in a vector, these expressions are understood regardless of context." << endl << endl;
    
    
    
    cout << "Hope this helps in the future" << endl << endl;
    cout << "Grace and Peace" << endl;
    cout << "Meeplet";
    
    

    return 0;
}
